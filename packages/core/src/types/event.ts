// Copyright 2023-2024 SO/DA zone
// SPDX-License-Identifier: Apache-2.0

import type { BlockNumber } from '@polkadot/types/interfaces';
import type { AnyJson, IU8a } from '@polkadot/types-codec/types';
import { Compact, GenericEvent } from '@polkadot/types';

import { EventBlockContext, EventExtrinsicContext, EventWithId, EventWithIdAndTx, ExtrinsicWithId } from './interfaces.js';

/**
 * A subclass of GenericEvent that includes contextual information
 * of an event in a block.
 */
export class GenericEventWithId extends GenericEvent
  implements EventWithId {
  blockNumber: Compact<BlockNumber>;
  blockHash: IU8a;
  blockPosition: number;

  constructor(
    value: GenericEvent,
    {
      blockNumber,
      blockHash,
      blockPosition
    }: EventBlockContext
  ) {
    super(value.registry, value.toU8a());
    this.blockNumber = blockNumber;
    this.blockHash = blockHash;
    this.blockPosition = blockPosition;
  }

  /**
   * Returns the unique identifier of the event.
   * The identifier is generated by combining the block number and the position of the event within the block.
   * The identifier follows the format `<block-number>-<block-position>`, where:
   * - `<block-number>` is the number of the block in which the event occurred.
   * - `<block-position>` is the positional index of the event within the block, starting from 0.
   */
  get eventId() {
    return `${this.blockNumber.toPrimitive()}-${this.blockPosition}`;
  }

  /**
   * Returns the JSON representation of the extrinsic with the added extrinsicId,
   * blockNumber, and position within the extrinsic.
   */
  toHuman(isExpanded?: boolean | undefined): Record<string, AnyJson> {
    return {
      eventId: this.eventId,
      blockPosition: this.blockPosition,
      blockNumber: this.blockNumber.toHuman(),
      blockHash: this.blockHash.toHuman(),
      ...(super.toHuman(isExpanded) as any)
    };
  }
}

/**
 * A subclass of GenericEventWithId that includes contextual information
 * of an event in an extrinsic.
 */
export class GenericEventWithIdAndTx extends GenericEventWithId
  implements EventWithIdAndTx {
  extrinsicPosition: number;
  extrinsicId: string;
  extrinsic: ExtrinsicWithId;

  constructor(
    value: GenericEvent,
    {
      extrinsicPosition,
      extrinsicId,
      extrinsic,
      ...eventBlockContext
    } : EventExtrinsicContext
  ) {
    super(value, eventBlockContext);
    this.extrinsicPosition = extrinsicPosition;
    this.extrinsicId = extrinsicId;
    this.extrinsic = extrinsic;
  }

  /**
   * Returns the JSON representation of the extrinsic with the added extrinsicId,
   * blockNumber, and position within the extrinsic.
   */
  toHuman(isExpanded?: boolean | undefined): Record<string, AnyJson> {
    return {
      extrinsicId: this.extrinsicId,
      extrinsicPosition: this.extrinsicPosition,
      extrinsic: this.extrinsic.toHuman(),
      ...(super.toHuman(isExpanded) as any)
    };
  }
}