import type { BlockNumber } from '@polkadot/types/interfaces';
import type { AnyJson } from '@polkadot/types-codec/types';
import { Compact, GenericEvent } from '@polkadot/types';

import { EventBlockContext, EventWithId } from './interfaces.js';

/**
 * A subclass of GenericEvent that includes identifier information.
 */
export class GenericEventWithId extends GenericEvent
  implements EventWithId {
  blockNumber: Compact<BlockNumber>;
  blockPosition: number;
  extrinsicPosition: number;
  extrinsicId: string;

  constructor(
    // TODO extract param object for positions...
    value: GenericEvent,
    {
      blockNumber,
      blockPosition: blockPos,
      extrinsicPosition: extrinsicPos,
      extrinsicId
    }: EventBlockContext
  ) {
    super(value.registry, value.toU8a());
    this.blockNumber = blockNumber;
    this.blockPosition = blockPos;
    this.extrinsicPosition = extrinsicPos;
    this.extrinsicId = extrinsicId;
  }

  /**
   * Returns the unique identifier of the event.
   * The identifier is generated by combining the extrinsic ID and the position of the event within the block.
   * The identifier follows the format `<block number>-<tx-position>-<event-position>`, where:
   * - `<block number>` is the number of the block containing the event.
   * - `<tx-position>` is the positional index of the extrinsic within the block, starting from 0.
   * - `<event-position>` is the positional index of the event within the extrinsic, starting from 0.
   */
  get eventId() {
    return `${this.blockNumber.toString()}-${this.blockPosition}`;
  }

  /**
   * Returns the JSON representation of the extrinsic with the added extrinsicId, blockNumber, and position properties.
   */
  toHuman(isExpanded?: boolean | undefined): Record<string, AnyJson> {
    return {
      eventId: this.eventId,
      extrinsicId: this.extrinsicId,
      extrinsicPos: this.extrinsicPosition,
      blockNumber: this.blockNumber.toHuman(),
      blockPos: this.blockPosition,
      ...(super.toHuman(isExpanded) as any)
    };
  }
}