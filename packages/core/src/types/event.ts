/*
 * Copyright 2023-2024 SO/DA zone ~ Marc Forn√≥s & Xueying Wang
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import type { BlockNumber } from '@polkadot/types/interfaces';
import type { AnyJson, IU8a } from '@polkadot/types-codec/types';
import { Compact, GenericEvent } from '@polkadot/types';

import { EventBlockContext, EventWithId } from './interfaces.js';

/**
 * A subclass of GenericEvent that includes contextual information.
 */
export class GenericEventWithId extends GenericEvent
  implements EventWithId {
  blockNumber: Compact<BlockNumber>;
  blockHash: IU8a;
  extrinsicPosition: number;
  extrinsicId: string;

  constructor(
    value: GenericEvent,
    {
      blockNumber,
      blockHash,
      extrinsicPosition,
      extrinsicId
    }: EventBlockContext
  ) {
    super(value.registry, value.toU8a());
    this.blockNumber = blockNumber;
    this.blockHash = blockHash;
    this.extrinsicPosition = extrinsicPosition;
    this.extrinsicId = extrinsicId;
  }

  /**
   * Returns the unique identifier of the event.
   * The identifier is generated by combining the extrinsic ID and the position of the event within the extrinsic.
   * The identifier follows the format `<extrinsic-id>-<tx-position>`, where:
   * - `<extrinsic-id>` is the identifier of the extrinsic in which the event occurred.
   * - `<tx-position>` is the positional index of the event within the extrinsic, starting from 0.
   */
  get eventId() {
    return `${this.extrinsicId}-${this.extrinsicPosition}`;
  }

  /**
   * Returns the JSON representation of the extrinsic with the added extrinsicId,
   * blockNumber, and position within the extrinsic.
   */
  toHuman(isExpanded?: boolean | undefined): Record<string, AnyJson> {
    return {
      eventId: this.eventId,
      extrinsicId: this.extrinsicId,
      extrinsicPosition: this.extrinsicPosition,
      blockNumber: this.blockNumber.toHuman(),
      blockHash: this.blockHash.toHuman(),
      ...(super.toHuman(isExpanded) as any)
    };
  }
}