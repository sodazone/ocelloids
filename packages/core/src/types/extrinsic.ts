// Copyright 2023-2024 SO/DA zone
// SPDX-License-Identifier: Apache-2.0

import { BlockNumber, Address } from '@polkadot/types/interfaces';
import { Compact, GenericExtrinsic } from '@polkadot/types';
import type { TxWithEvent } from '@polkadot/api-derive/types';
import type { AnyJson, IU8a } from '@polkadot/types-codec/types';

import { ExtrinsicBlockContext, ExtrinsicWithId, TxWithIdAndEvent } from './interfaces.js';

export type Origin = {
  type: 'proxy' | 'multisig',
  address: Address
}

/**
 * A subclass of GenericExtrinsic that includes identifier information.
 */
export class GenericExtrinsicWithId extends GenericExtrinsic
  implements ExtrinsicWithId {
  blockNumber: Compact<BlockNumber>;
  blockHash: IU8a;
  blockPosition: number;
  origins: Origin[];

  constructor(
    value: GenericExtrinsic,
    {
      blockNumber,
      blockPosition,
      blockHash
    } : ExtrinsicBlockContext,
    origins?: Origin[]
  ) {
    super(value.registry, value.toU8a());
    this.blockNumber = blockNumber;
    this.blockPosition = blockPosition;
    this.blockHash = blockHash;
    this.origins = origins ? origins : [];
  }

  /**
   * Returns the unique identifier of the extrinsic.
   * The identifier is generated by combining the block number and the position of the extrinsic within the block.
   * The identifier follows the format `<block number>-<position>`, where:
   * - `<block number>` is the number of the block containing the extrinsic.
   * - `<position>` is the positional index of the extrinsic within the block, starting from 0.
   */
  get extrinsicId() {
    return `${this.blockNumber.toString()}-${this.blockPosition}`;
  }

  addOrigin(o: Origin) {
    // if (!this.origins) {
    //   this.origins = [];
    // }
    this.origins.push(o);
  }

  /**
   * Returns the JSON representation of the extrinsic with the added extrinsicId, blockNumber, and position properties.
   */
  toHuman(isExpanded?: boolean | undefined): AnyJson {
    return {
      extrinsicId: this.extrinsicId,
      blockNumber: this.blockNumber.toHuman(),
      blockHash: this.blockHash.toHuman(),
      position: this.blockPosition,
      origins: this.origins?.map(o => (
        {
          type: o.type,
          address: o.address.toHuman()
        }
      )),
      ...(super.toHuman(isExpanded) as any)
    };
  }
}

/**
 * Enhances a transaction object with identifier information by wrapping the extrinsic with the GenericExtrinsicWithId class.
 * @param context The extrinsic block context.
 * @param tx The transaction object to enhance.
 * @returns The enhanced transaction object with identifier information.
 */
export function enhanceTxWithId(
  context: ExtrinsicBlockContext,
  tx: TxWithEvent
) : TxWithIdAndEvent {
  tx.extrinsic = new GenericExtrinsicWithId(tx.extrinsic, context);
  return tx as TxWithIdAndEvent;
}